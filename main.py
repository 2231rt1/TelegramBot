from settings import TG_TOKEN
from telebot import TeleBot, types

# Initialize the bot with the provided token
bot = TeleBot(TG_TOKEN)

def send_message(chat_id: int, text: str, parse_mode: str = None, reply_markup: types.InlineKeyboardMarkup = None):
    """Helper function to send a message."""
    bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)

def format_greeting(first_name: str) -> str:
    """Format the greeting message."""
    return (f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–Ω–∏–∫—é—Ä—É! üíÖ\n"
            "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n\n"
            "* üí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–¥–µ–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞\n"
            "* üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∫ –º–∞—Å—Ç–µ—Ä—É\n"
            "* üíÖ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–æ–≥—Ç—è–º–∏\n\n"
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!")

def format_help() -> str:
    """Format the help message."""
    return (
        "üíÖ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞–Ω–∏–∫—é—Ä—É! ‚ú®\n\n"
        "‚ú® <b>–•–æ—á–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≥—Ç–∏?</b> –Ø –ø–æ–º–æ–≥—É! ‚ú®\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ:\n\n"
        "* <b>–•–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞</b>: üíÖ –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–∞–º—ã–µ –º–æ–¥–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã...\n"
        "* <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É</b>: üóì –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞...\n"
        "* <b>–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É</b>: üíñ –Ø –ø–æ–¥–µ–ª—é—Å—å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Ö–æ–¥–∞ –∑–∞ –Ω–æ–≥—Ç—è–º–∏...\n"
        "* <b>–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è</b>: üì∏ –•–æ—á–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è? –ü–æ—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ...\n"
        "* <b>–¢–µ—Å—Ç</b>: üíé –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –º–∞–Ω–∏–∫—é—Ä–∞ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?\n"
        "* <b>–ù–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ</b>: ü©∫ –£–∑–Ω–∞–π –æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–æ–≥—Ç–µ–π...\n"
        "* <b>–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã</b>: üî• –Ø —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–∞–º—ã—Ö –º–æ–¥–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö...\n"
        "* <b>–¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏</b>: üí≤ –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥...\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π <b><u>—Ä–∞–∑–¥–µ–ª</u></b> –≤ –º–µ–Ω—é –±–æ—Ç–∞! üòâ\n"
        "–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚ú®"
    )

def get_response(message_text: str) -> str:
    """Get the appropriate response based on user input."""
    responses = {
        "–•–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞": "Here are some ideas for your manicure...",
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É": "Let's schedule your appointment...",
        "–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É": "Here are some care tips for your nails...",
        "–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è": "Check out our photo gallery...",
        "–¢–µ—Å—Ç": "Doing test...",
        "–ù–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ": "Learn how nail health affects your well-being...",
        "–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã": "Discover the latest manicure trends...",
        "–¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏": "Find out about our prices and services...",
    }
    return responses.get(message_text, "–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")

@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    """Handle the start command and send a greeting."""
    greeting_text = format_greeting(message.from_user.first_name)
    send_message(message.chat.id, greeting_text)

@bot.message_handler(commands=['help'])
def handle_help(message: types.Message):
    """Handle the help command and send the help message."""
    help_text = format_help()
    markup = create_help_markup()
    send_message(message.chat.id, help_text, parse_mode='html', reply_markup=markup)

def create_help_markup() -> types.InlineKeyboardMarkup:
    """Create help menu markup."""
    buttons = [
        ("–•–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞üíÖ", '–•–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞'),
        ("–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—èüì∏", '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è'),
        ("–¢–µ—Å—Çüíé", '–¢–µ—Å—Ç'),
        ("–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—Éüíñ", '–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É'),
        ("–ù–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µü©∫", '–ù–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ'),
        ("–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ãüî•", '–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã'),
        ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—Éüóì", '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É'),
        ("–¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏üí≤", '–¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏'),
    ]

    markup = types.InlineKeyboardMarkup()
    for i in range(0, len(buttons), 2):
        row = buttons[i:i + 2]
        markup.add(*(types.InlineKeyboardButton(text, callback_data=callback) for text, callback in row))
        
    return markup

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback: types.CallbackQuery):
    """Handle callback queries."""
    chat_id = callback.message.chat.id
    response = get_response(callback.data)
    send_message(chat_id, response)

@bot.message_handler(func=lambda message: True)  # Handle all other messages
def process_user_input(message: types.Message):
    """Process user input and handle queries."""
    response = get_response(message.text)
    send_message(message.chat.id, response)

# Start polling for new messages
if __name__ == "__main__":
    bot.polling(none_stop=True)
