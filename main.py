import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command
from aiogram import Router
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv('.env')
TG_TOKEN = os.getenv('TG_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TG_TOKEN)
dp = Dispatcher()
router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø–∏—Å–µ–π
def create_appointments_table() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect("appointments.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS appointments (
            chat_id INTEGER,
            appointment_date TEXT,
            appointment_time INTEGER
        )
    """)
    conn.commit()
    conn.close()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
async def send_message_with_markup(chat_id: int, text: str, markup: ReplyKeyboardMarkup) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    await bot.send_message(chat_id, text, parse_mode='html', reply_markup=markup)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def format_greeting_message(first_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    return (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–Ω–∏–∫—é—Ä—É! üíÖ\n"
        "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n\n"
        "* –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–¥–µ–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞\n"
        "* –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∫ –º–∞—Å—Ç–µ—Ä—É\n"
        "* –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–æ–≥—Ç—è–º–∏\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!"
    )

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
def format_help_message() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏."""
    return (
        "–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞–Ω–∏–∫—é—Ä—É! ‚ú®\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ:\n\n"
        "* –•–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞üíÖ: –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–∞–º—ã–µ –º–æ–¥–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã...\n"
        "* –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—èüì∏: –•–æ—á–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è? –ü–æ—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ...\n"
        "* –¢–µ—Å—Çüíé: –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –º–∞–Ω–∏–∫—é—Ä–∞ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?\n"
        "* –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—Éüíñ: –Ø –ø–æ–¥–µ–ª—é—Å—å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Ö–æ–¥–∞ –∑–∞ –Ω–æ–≥—Ç—è–º–∏...\n"
        "* –ù–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µü©∫: –£–∑–Ω–∞–π –æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–æ–≥—Ç–µ–π...\n"
        "* –ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ãüî•: –Ø —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–∞–º—ã—Ö –º–æ–¥–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö...\n"
        "* –¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏üí≤: –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥...\n"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏
def create_help_markup() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é –ø–æ–º–æ—â–∏."""
    buttons = [
        [
            types.KeyboardButton(text="–•–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞üíÖ"),
            types.KeyboardButton(text="–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—èüì∏"),
        ],
        [
            types.KeyboardButton(text="–¢–µ—Å—Çüíé"),
            types.KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—Éüíñ"),
        ],
        [
            types.KeyboardButton(text="–ù–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µü©∫"),
            types.KeyboardButton(text="–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ãüî•"),
        ],
        [
            types.KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—Éüóì"),
            types.KeyboardButton(text="–¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏üí≤"),
        ],
    ]

    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    first_name = message.from_user.first_name
    greeting_text = format_greeting_message(first_name)
    markup = create_help_markup()
    await send_message_with_markup(message.chat.id, greeting_text, markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –Ω–µ–∫–æ–º–º–∞—Ç–∞ –ª–æ—Ö
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏."""
    help_text = format_help_message()
    markup = create_help_markup()
    await send_message_with_markup(message.chat.id, help_text, markup)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
def create_appointment_markup(dates, unavailable_time_slots):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏."""
    buttons = []
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ –¥–∞—Ç–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏
    for date in dates:
        for time in range(16, 23, 2):  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 16:00-22:00 —Å —à–∞–≥–æ–º 2 —á–∞—Å–∞
            if (date, time) not in unavailable_time_slots:
                button_text = f"{time}:00"
                callback_data = f"appointment_{date}_{time}"
                buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏
    if buttons:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[buttons])
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏, —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", callback_data="no_slots")]
        ])
    
    return markup



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É
@router.message(lambda message: message.text.lower().startswith("–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def handle_appointment_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É."""
    today = datetime.today().strftime("%Y-%m-%d")
    tomorrow = (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d")
    dates = [today, tomorrow]

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("appointments.db")
    c = conn.cursor()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    c.execute("SELECT appointment_date, appointment_time FROM appointments WHERE appointment_date IN (?, ?)", (today, tomorrow))
    existing_appointments = c.fetchall()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.chat.id
    c.execute("SELECT * FROM appointments WHERE chat_id = ? AND appointment_date IN (?, ?)", (user_id, today, tomorrow))
    existing_user_appointments = c.fetchall()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    unavailable_time_slots = set()
    for appointment in existing_appointments:
        date, time = appointment
        unavailable_time_slots.add((date, time))

    if existing_user_appointments:
        for appointment in existing_user_appointments:
            date, time = appointment[1], appointment[2]
            unavailable_time_slots.add((date, time))

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    markup = create_appointment_markup(dates, unavailable_time_slots)
    await send_message_with_markup(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", markup)

    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É
@router.callback_query(lambda callback: callback.data.startswith("appointment_"))
async def handle_appointment_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É."""
    chat_id = callback.message.chat.id
    appointment_data = callback.data.split("_")
    date = appointment_data[1]
    appointment_time = int(appointment_data[2])

    # –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("appointments.db")
    c = conn.cursor()
    c.execute("INSERT INTO appointments (chat_id, appointment_date, appointment_time) VALUES (?, ?, ?)", 
              (chat_id, date, appointment_time))
    conn.commit()
    conn.close()

    await bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {appointment_time}:00 –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤ {date}.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∏—Ö."""
    response = get_response(message.text.lower().rstrip("üíÖüì∏üíéüíñü©∫üî•üóìüí≤"))
    if callable(response):
        await response(message)
    else:
        await message.answer(response)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_response(message_text: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    responses = {
        "—Ö–æ—á—É –∏–¥–µ–∏ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞": "Here are some ideas for your manicure... üíÖ",
        "—Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è": "Check out our photo gallery... üì∏",
        "—Ç–µ—Å—Ç": "Doing test... üíé",
        "—Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É": "Here are some care tips for your nails... üíñ",
        "–Ω–æ–≥—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ": "Learn how nail health affects your well-being... ü©∫",
        "–º–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã": "Discover the latest manicure trends... üî•",
        "—Ü–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏": "Find out about our prices and services... üí≤",
    }
    return responses.get(message_text, "Sorry, I don't understand that. Please try again.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    create_appointments_table()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
